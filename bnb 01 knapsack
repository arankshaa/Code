import java.util.Arrays;
import java.util.Comparator;
import java.util.PriorityQueue;

class Node {
    int level, profit, weight, bound;

    public Node(int level, int profit, int weight, int bound) {
        this.level = level;
        this.profit = profit;
        this.weight = weight;
        this.bound = bound;
    }
}

public class KnapsackBranchAndBound {

    public static int knapsack(int[] weights, int[] values, int capacity) {
        int n = weights.length;
        Node[] nodes = new Node[n];

        for (int i = 0; i < n; i++) {
            nodes[i] = new Node(i, 0, 0, 0);
        }

        // Sorting nodes based on value-to-weight ratio in descending order
        Arrays.sort(nodes, Comparator.comparingDouble(
                node -> (double) values[node.level] / weights[node.level]).reversed());

        // Priority queue to store nodes based on bound value
        PriorityQueue<Node> queue = new PriorityQueue<>(Comparator.comparingInt(node -> node.bound));

        // Initialize the first node (root of the decision tree)
        Node root = new Node(-1, 0, 0, 0);
        queue.add(root);

        int maxProfit = 0;

        while (!queue.isEmpty()) {
            Node currentNode = queue.poll();

            if (currentNode.level == n - 1) {
                continue; // Reached the leaf node
            }

            // Include the next item
            Node includeNode = new Node(currentNode.level + 1,
                    currentNode.profit + values[currentNode.level + 1],
                    currentNode.weight + weights[currentNode.level + 1],
                    currentNode.bound);
            includeNode.bound = calculateBound(includeNode, weights, values, capacity);

            // If the node is feasible and its profit is greater than the maxProfit, update maxProfit
            if (includeNode.weight <= capacity && includeNode.profit > maxProfit) {
                maxProfit = includeNode.profit;
            }

            // If the node is promising, add it to the queue
            if (includeNode.bound > maxProfit) {
                queue.add(includeNode);
            }

            // Exclude the next item
            Node excludeNode = new Node(currentNode.level + 1,
                    currentNode.profit, currentNode.weight, currentNode.bound);
            excludeNode.bound = calculateBound(excludeNode, weights, values, capacity);

            // If the node is promising, add it to the queue
            if (excludeNode.bound > maxProfit) {
                queue.add(excludeNode);
            }
        }

        return maxProfit;
    }

    private static int calculateBound(Node node, int[] weights, int[] values, int capacity) {
        int remainingCapacity = capacity - node.weight;
        int bound = node.profit;

        // Add the value of items that can be completely included
        for (int i = node.level + 1; i < weights.length; i++) {
            if (weights[i] <= remainingCapacity) {
                bound += values[i];
                remainingCapacity -= weights[i];
            } else {
                bound += (double) values[i] / weights[i] * remainingCapacity;
                break;
            }
        }

        return bound;
    }

    public static void main(String[] args) {
        int[] values = {60, 100, 120};
        int[] weights = {10, 20, 30};
        int capacity = 50;

        int maxProfit = knapsack(weights, values, capacity);
        System.out.println("Maximum Profit: " + maxProfit);
    }
}
This Jav
